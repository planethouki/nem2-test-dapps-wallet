const account = require('../../src/assets/utils/account')
const helper = require('../../src/assets/utils/helper')

jest.mock('axios')

describe('account', () => {

  const privateKey1 = '25B3F54217340F7061D02676C4B928ADB4395EB70A2A52D2A11E2F4AE011B03E'
  const privateKey2 = '35B3F54217340F7061D02676C4B928ADB4395EB70A2A52D2A11E2F4AE011B03E'
  const privateKey3 = '45B3F54217340F7061D02676C4B928ADB4395EB70A2A52D2A11E2F4AE011B03E'
  const publicKey1 = 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580'
  const generationHash = '3B5E1FA6445653C971A50687E75E6D09FB30481055E3990C84B25E9222DC1155'

  describe('sign', () => {
    test('transferTransaction', () => {
      const signedTransaction =  {
        payload: 'BB0000000000000041357A89184452E4AF71B47DA654D84B6B2BD486D2D0E656EE59F97FD4191EC117ACC5ABED543DCF6B8D359FAB6BCBD70BB8517B6EB487F75DD00ADDDD6EDD0DC65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC385800000000001985441A0860100000000006E8CFA66020000009814F3DABC922F7B2D06A6AF544B58E5CFA2099C91B0077C0B000100000000003CE19A057E831F0900E40B540200000000386D544575416932746A',
        hash: 'F70A1641B74CEB777A3165BA5751806FFDDC3E2F634220DE566EF39C85E26AEC',
        signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
        type: 16724,
        networkType: 152
      }

      const expectSignature = signedTransaction.payload.substr((8) * 2, (64) * 2)

      const unsignedPayload = helper.spliceSignature(
        signedTransaction.payload,
        "".padStart(128, "0"),
        "".padStart(64, "0")
      )

      expect(account.sign(privateKey1, unsignedPayload, generationHash)).toBe(expectSignature)
    })

    test('aggregateBondedTransaction', () => {
      const signedTransaction = {
        payload
        hash: '2CC57BF4235322C01369FF227BB2E5307C38EC23229186331DFA16E5B785CDDE',
        signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
        type: 16961,
        networkType: 152
      }

      const expectSignature = signedTransaction.payload.substr((8) * 2, (64) * 2)

      const unsignedPayload = helper.spliceSignature(
        signedTransaction.payload,
        "".padStart(128, "0"),
        "".padStart(64, "0")
      )

      expect(account.sign(privateKey1, unsignedPayload, generationHash)).toBe(expectSignature)
    })

    test('aggregateCompleteTransaction', () => {
      const signedTransaction = {
        payload
        hash: '7AD7C2B2F7B2CA3CB347DDAEF114E3DDCE330CFB35C0E57B5DFEF0E9D770CE87',
        signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
        type: 16705,
        networkType: 152
      }

      const expectSignature = signedTransaction.payload.substr((8) * 2, (64) * 2)

      const unsignedPayload = helper.spliceSignature(
        signedTransaction.payload,
        "".padStart(128, "0"),
        "".padStart(64, "0")
      )

      expect(account.sign(privateKey1, unsignedPayload, generationHash)).toBe(expectSignature)
    })
  })

  describe('cosign', () => {
    test('aggregateCompleteTransactionWithNoCoSign', () => {
      // Arguments for nem2.cosign. Must be signed by privateKey1 and privateKey2; only privateKey1 signed.
      const signedTransaction = {
        payload
        hash: '8AABCBE55D02E208D3E0BDCE66BA8F9C7CF87FFF4FE957179503E848436CAC46',
        signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
        type: 16705,
        networkType: 152
      }
      // Same as above, except co-signed. Signed by privateKey1 and co-signed by privateKey2.
      const cosignedTransaction = {
        payload: 'f00100000000000087577A911E6D444B7A3B15ACDCFA1DFA530E49553CD38C5BC6685628B917C68CDACA137C356322085F547CFBE291119A1FF2503EBF7A2771937F7CB541583408C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC385800000000001984141400D030000000000EA901BD90200000026C4A9A4E58478E827AC8A512CD92C0CD54E587661D288B8008EC6CDB5500462E0000000000000006B00000000000000C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC3858000000000019854419814F3DABC922F7B2D06A6AF544B58E5CFA2099C91B0077C0B000100000000003CE19A057E831F0900E40B540200000000386D544575416932746A00000000006B000000000000007105CBCCCAE60929A908BDB0C8FD475A44CAAB9C33D7482A9F1840541F12DA4900000000019854419814F3DABC922F7B2D06A6AF544B58E5CFA2099C91B0077C0B000100000000003CE19A057E831F0900E40B540200000000386D544575416932746A000000000000000000000000007105CBCCCAE60929A908BDB0C8FD475A44CAAB9C33D7482A9F1840541F12DA494AAE1956F2B9922FAA96B1C6BF10217CF0105C5420CBE2D9ADFC0ECCB2581B579CA8EE36C2D9ADE62A78F0AE588E43A3674E7956FEADE354D882B8CCAD472205',
        hash: '8AABCBE55D02E208D3E0BDCE66BA8F9C7CF87FFF4FE957179503E848436CAC46',
        signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
        type: 16705,
        networkType: 152
      }
      const expectedCosig = cosignedTransaction.payload.substring((0x01f0 - 64) * 2, 0x01f0 * 2)
      const cosignature = account.cosign(privateKey2, signedTransaction.hash)
      expect(cosignature).toBe(expectedCosig)
    })

    test('aggregateTransactionWithCosign', () => {
      // Arguments for nem2.cosign. Must be signed by privateKey1, privateKey2 and privateKey3; only privateKey1 signed and privateKey2 co-signed.
      const signedTransaction = {
        payload
        hash: '974EC0F0CCC8DF5E5EB889C4924159745ED463A21E1A1CB7C10095E964D3D7AB',
        signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
        type: 16705,
        networkType: 152
      }
      // Same as above, except co-signed. Signed by privateKey1 and co-signed by privateKey2 and privateKey3.
      const cosignedTransaction = {
        payload: 'c
          hash: '974EC0F0CCC8DF5E5EB889C4924159745ED463A21E1A1CB7C10095E964D3D7AB',
          signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
          type: 16705,
          networkType: 152
      }
      const pubA = cosignedTransaction.payload
        .substring((0x02c8 - 64 - 32) * 2, (0x02c8 - 64) * 2)
      const pubB = cosignedTransaction.payload
        .substring((0x02c8 - 64 - 32 - 8 - 64 - 32) * 2, (0x02c8 - 64 - 32 - 8 - 64) * 2)
      const expectedCosig = {
        [pubA]: cosignedTransaction.payload.substring((0x02c8 - 64) * 2, 0x02c8 * 2),
        [pubB]: cosignedTransaction.payload.substring((0x02c8 - 64 - 32 - 8 - 64) * 2, (0x02c8 - 64 - 32 - 8) * 2)
      }
      const pub3 = account.privateKeyToPublicKey(privateKey3)
      const cosignature = account.cosign(privateKey3, signedTransaction.hash)
      expect(cosignature).toBe(expectedCosig[pub3])
    })

    test('aggregateBondedWithNoCosign', () => {
      const signedTransaction = {
        payload
        hash: 'B594FA8AC114EBF5CF064339CB1FF3DC62881EE1637E7DA09816CA6C7012E502',
        signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
        type: 16961,
        networkType: 152
      }
      const cosignedTransaction = {
        payload: 'f
          hash: 'B594FA8AC114EBF5CF064339CB1FF3DC62881EE1637E7DA09816CA6C7012E502',
          signerPublicKey: 'C65B49BA7673BFEC3EFD04DE7EF412A6346F4BA745AAC09649E8CAFE1AC38580',
          type: 16961,
          networkType: 152
      }
      const expectedCosig = cosignedTransaction.payload.substring((0x01f0 - 64) * 2, 0x01f0 * 2)
      const cosignature = account.cosign(privateKey2, signedTransaction.hash)
      expect(cosignature).toBe(expectedCosig)
    })
  })

  test('privateKeyToPublicKey', () => {
    expect(account.privateKeyToPublicKey(privateKey1)).toBe(publicKey1)
  })
})
